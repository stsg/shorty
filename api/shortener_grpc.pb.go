// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/shortener.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Shortener_ShortRequest_FullMethodName      = "/shortener.Shortener/ShortRequest"
	Shortener_ShortID_FullMethodName           = "/shortener.Shortener/ShortID"
	Shortener_ShortRequestBatch_FullMethodName = "/shortener.Shortener/ShortRequestBatch"
)

// ShortenerClient is the client API for Shortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerClient interface {
	// Create a new shortened URL
	ShortRequest(ctx context.Context, in *ShortRequestRequest, opts ...grpc.CallOption) (*ShortRequestResponse, error)
	// Get the real URL for a shortened URL
	ShortID(ctx context.Context, in *ShortIDRequest, opts ...grpc.CallOption) (*ShortIDResponse, error)
	// Creates a batch of URLs and returns their shortened versions
	ShortRequestBatch(ctx context.Context, in *ShortRequestBatchRequest, opts ...grpc.CallOption) (*ShortRequestBatchResponse, error)
}

type shortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerClient(cc grpc.ClientConnInterface) ShortenerClient {
	return &shortenerClient{cc}
}

func (c *shortenerClient) ShortRequest(ctx context.Context, in *ShortRequestRequest, opts ...grpc.CallOption) (*ShortRequestResponse, error) {
	out := new(ShortRequestResponse)
	err := c.cc.Invoke(ctx, Shortener_ShortRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) ShortID(ctx context.Context, in *ShortIDRequest, opts ...grpc.CallOption) (*ShortIDResponse, error) {
	out := new(ShortIDResponse)
	err := c.cc.Invoke(ctx, Shortener_ShortID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) ShortRequestBatch(ctx context.Context, in *ShortRequestBatchRequest, opts ...grpc.CallOption) (*ShortRequestBatchResponse, error) {
	out := new(ShortRequestBatchResponse)
	err := c.cc.Invoke(ctx, Shortener_ShortRequestBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServer is the server API for Shortener service.
// All implementations must embed UnimplementedShortenerServer
// for forward compatibility
type ShortenerServer interface {
	// Create a new shortened URL
	ShortRequest(context.Context, *ShortRequestRequest) (*ShortRequestResponse, error)
	// Get the real URL for a shortened URL
	ShortID(context.Context, *ShortIDRequest) (*ShortIDResponse, error)
	// Creates a batch of URLs and returns their shortened versions
	ShortRequestBatch(context.Context, *ShortRequestBatchRequest) (*ShortRequestBatchResponse, error)
	mustEmbedUnimplementedShortenerServer()
}

// UnimplementedShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServer struct {
}

func (UnimplementedShortenerServer) ShortRequest(context.Context, *ShortRequestRequest) (*ShortRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortRequest not implemented")
}
func (UnimplementedShortenerServer) ShortID(context.Context, *ShortIDRequest) (*ShortIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortID not implemented")
}
func (UnimplementedShortenerServer) ShortRequestBatch(context.Context, *ShortRequestBatchRequest) (*ShortRequestBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortRequestBatch not implemented")
}
func (UnimplementedShortenerServer) mustEmbedUnimplementedShortenerServer() {}

// UnsafeShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServer will
// result in compilation errors.
type UnsafeShortenerServer interface {
	mustEmbedUnimplementedShortenerServer()
}

func RegisterShortenerServer(s grpc.ServiceRegistrar, srv ShortenerServer) {
	s.RegisterService(&Shortener_ServiceDesc, srv)
}

func _Shortener_ShortRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).ShortRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_ShortRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).ShortRequest(ctx, req.(*ShortRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_ShortID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).ShortID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_ShortID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).ShortID(ctx, req.(*ShortIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_ShortRequestBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortRequestBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).ShortRequestBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_ShortRequestBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).ShortRequestBatch(ctx, req.(*ShortRequestBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortener_ServiceDesc is the grpc.ServiceDesc for Shortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortener.Shortener",
	HandlerType: (*ShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShortRequest",
			Handler:    _Shortener_ShortRequest_Handler,
		},
		{
			MethodName: "ShortID",
			Handler:    _Shortener_ShortID_Handler,
		},
		{
			MethodName: "ShortRequestBatch",
			Handler:    _Shortener_ShortRequestBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/shortener.proto",
}
